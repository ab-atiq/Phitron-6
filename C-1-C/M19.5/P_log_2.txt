আপনার প্রবলেম সল্যুশন সঠিকভাবে হয় নাই। 
নিচের এপ্রোচ ফলো করতে পারেন। 


Problem Explanation:

এই সমস্যাটিতে আপনাকে একটি সংখ্যা N দেওয়া হবে, এবং আপনাকে 
⌊log2(N)⌋ এর মান বের করতে হবে। এটি হলো সবচেয়ে বড় পূর্ণসংখ্যা k যেন 2^k≤N হয়।

Input:
একটি সংখ্যা N (1 ≤ N ≤ 10^18)

Output:
⌊log2(N)⌋ এর মান প্রিন্ট করতে হবে।

Examples:

Input: 1
Output: 0
কারণ 2^0 = 1, যা N=1 এর সমান।

Input: 8
Output: 3
কারণ 2^3=8, যা N=8 এর সমান।

Solution Concept:

Base Case: যদি N এর মান ১ এর চেয়ে ছোট হয় (অর্থাৎ N<2), তাহলে উত্তর হবে ০, কারণ log2(1)=0।

Recursive Step: যদি N এর মান ২ বা তার বেশি হয়, তাহলে N কে ২ দিয়ে ভাগ করে আবার একই ফাংশন কল করতে হবে এবং ফলাফলের সাথে ১ যোগ করতে হবে। এটি করা হয় কারণ প্রতিবার N কে ২ দিয়ে ভাগ করলে log2(N) এর মান ১ করে কমে যায়।

Termination: রিকার্শনটি তখনই থামবে যখন N এর মান ১ এর চেয়ে ছোট হবে, এবং তখন আমরা উত্তর পেয়ে যাব।



Solution Steps:

Base Case: যদি N<2 হয়, তাহলে ০ রিটার্ন করো।

Recursive Call: নাহলে N কে ২ দিয়ে ভাগ করে আবার ফাংশন কল করো এবং ফলাফলের সাথে ১ যোগ করো।

Result: সবশেষে প্রাপ্ত মানই হবে আমাদের কাঙ্খিত ⌊log2(N)⌋।

Example Solution Code:
#include <stdio.h>

long long int log2_recursive(long long int N) {
    if (N < 2) {
        return 0;
    } else {
        return 1 + log2_recursive(N / 2);
    }
}

int main() {
    long long int N;
    scanf("%lld", &N); // ইনপুট নেওয়া
    printf("%lld\n", log2_recursive(N)); // ফলাফল প্রিন্ট করা
    return 0;
}

Explanation of Code:

Base Case Handling: if (N < 2) চেক করে দেখে N এর মান ১ এর চেয়ে ছোট কিনা। যদি হয়, তাহলে ০ রিটার্ন করে।

Recursive Calculation: else অংশে N কে ২ দিয়ে ভাগ করে আবার log2_recursive ফাংশন কল করা হয় এবং এর সাথে ১ যোগ করা হয়। এটি log2(N) এর মান বার করার জন্য করা হয়।

Output: main ফাংশনে N ইনপুট নিয়ে log2_recursive কল করে ফলাফল প্রিন্ট করা হয়।

এই সমাধানটি খুবই কার্যকর কারণ এটি রিকার্শন ব্যবহার করে log2(N) এর মান বের করে এবং N এর মান 10 ^18 পর্যন্ত সঠিকভাবে কাজ করে।